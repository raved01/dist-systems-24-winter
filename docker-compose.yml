version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    command: ["sh", "/app/entrypoint.sh"]
    ports:
      - "80:80"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=database
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DJANGO_SETTINGS_MODULE=dysSysLab.settings
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  flask-frontend:
    image: maeddes/frontendflask:hse24  # Offizielles Docker-Image f체r das Frontend
    container_name: flask-frontend
    environment:
      - API_URL=http://backend:80/shopping  # Verweis auf den Backend-Service
    ports:
      - "5000:5000"  # Mapping f체r das Frontend (optional, je nach Bedarf)
    networks:
      - app-network
    depends_on:
      - backend  # Stellt sicher, dass das Backend zuerst hochf채hrt
    platform: linux/amd64

networks:
  app-network:  # Gemeinsames Netzwerk f체r Kommunikation zwischen Services
    driver: bridge

volumes:
  postgres-data:
